{$REGION 'Copyright (C) CMC Development Team'}
{ **************************************************************************
  Copyright (C) 2015 CMC Development Team

  CMC is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  CMC is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with CMC. If not, see <http://www.gnu.org/licenses/>.
  ************************************************************************** }

{ **************************************************************************
  Additional Copyright (C) for this modul:

  Chromaprint: Audio fingerprinting toolkit
  Copyright (C) 2010-2012  Lukas Lalinsky <lalinsky@gmail.com>


  Lomont FFT: Fast Fourier Transformation
  Original code by Chris Lomont, 2010-2012, http://www.lomont.org/Software/


  ************************************************************************** }
{$ENDREGION}
{$REGION 'Notes'}
{ **************************************************************************

  See CP.Chromaprint.pas for more information

  ************************************************************************** }

unit CP.AVFFT;
{$IFDEF FPC}
{$MODE delphi}
{$ENDIF}

interface

uses
    Classes, SysUtils,
    CP.Def, CP.FFT,
    { ffMPEG - libAV }
    libavcodec_avfft;

type

    { TFFTAV }

    TFFTAV = class(TFFTLib)
    private
        m_rdft_ctx: PRDFTContext;
        FInput: PFFTSample;

    public
        constructor Create(frame_size: integer; window: TDoubleArray);
        destructor Destroy; override;
        procedure ComputeFrame(input: TSmallintArray; var frame: TFFTFrame); override;
    end;

implementation

uses
    libavutil_mem;

{ TFFTAV }

procedure TFFTAV.ComputeFrame(input: TSmallintArray; var frame: TFFTFrame);
var
    i: integer;
begin
    // this is ApplyWindow
    for i := 0 to FFrameSize - 1 do
    begin
        TSingleArray(FInput)[i] := input[i] * FWindow[i] * 1.0;
    end;

    av_rdft_calc(m_rdft_ctx, FInput);
    frame.FData[0] := TSingleArray(FInput)[0] * TSingleArray(FInput)[0];
    frame.FData[FFrameSizeH] := TSingleArray(FInput)[1] * TSingleArray(FInput)[1];
    for i := 1 to FFrameSizeH - 1 do
    begin
        frame.FData[i] := TSingleArray(FInput)[2 * i] * TSingleArray(FInput)[2 * i] + TSingleArray(FInput)[2 * i + 1] * TSingleArray(FInput)[2 * i + 1];
    end;

end;

constructor TFFTAV.Create(frame_size: integer; window: TDoubleArray);
var
    bits: integer;
begin
    FFrameSize := frame_size;
    FFrameSizeH := frame_size div 2;
    FWindow := window;

    // SetLength(FInput, frame_size);
    FInput := av_mallocz(sizeof(single) * frame_size);

    bits := -1;
    while frame_size > 0 do
    begin
        inc(bits);
        frame_size := frame_size shr 1;
    end;
    m_rdft_ctx := av_rdft_init(bits, DFT_R2C);
end;

destructor TFFTAV.Destroy;
begin
    av_rdft_end(m_rdft_ctx);
    av_free(FInput);

    SetLength(FWindow, 0);
    inherited;
end;

end.
