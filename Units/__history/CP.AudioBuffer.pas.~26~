unit CP.AudioBuffer;

interface

uses
    Classes,
    CP.Def, CP.AudioConsumer;

type

    TAudioBuffer = class(TAudioConsumer)
    private
        FData: TSmallintArray;
    public
        constructor Create;
        destructor Destroy; override;
        procedure Consume(Input: TSmallintArray; AOffset: integer; ALength: integer); override; // eigentlich abstract
        function Data: TSmallintArray;
        procedure Reset;
    end;

implementation

{ TAudioBuffer }

procedure TAudioBuffer.Consume(Input: TSmallintArray; AOffset: integer; ALength: integer);
var
    i, n: integer;
begin
    n := Length(FData);
    SetLength(FData, n + ALength - AOffset);
    for i := AOffset to ALength - 1 do
    begin
        FData[n + i - AOffset] := Input[i];
    end;

end;



constructor TAudioBuffer.Create;
begin
    SetLength(FData, 0);
end;



function TAudioBuffer.Data: TSmallintArray;
begin
    Result := FData;
end;



destructor TAudioBuffer.Destroy;
begin
    SetLength(FData, 0);
    inherited;
end;



procedure TAudioBuffer.Reset;
begin
    SetLength(FData, 0);
end;

end.
