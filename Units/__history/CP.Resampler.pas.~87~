unit CP.Resampler;

{$IFDEF FPC}
{$MODE delphi}
{$ENDIF}

interface

uses
    Windows, Classes, SysUtils, CP.Def;

// Resampler configuration
const

    FILTER_SHIFT = 15;
    WINDOW_TYPE = 9;



type
    TFELEM = smallint;
    TFELEML = double;
    PFELEM = ^TFELEML;

    PAVClass = pointer;

    { TAVResampleContext }

    TAVResampleContext = record
        rAVClass: PAVClass;
        rFilterBank: array of smallint;
        rFilterLength: integer;
        rIdealDstIncr: integer;
        rDstIncr: integer;
        rIndex: int32;
        rFrac: integer;
        rSrcIncr: integer;
        rCompensationDistance: integer;
        rPhaseShift: integer;
        rPhaseMask: integer;
        rLinear: integer;
        procedure Clear;

        procedure Init(out_rate, in_rate, filter_size, APhaseShift: integer; ALinear: integer; cutoff: double);
        function Resample(dst: TSmallintArray; src: TSmallintArray; var consumed: integer; src_size: integer;
                dst_size: integer; update_ctx: integer): integer;
    end;

    PAVResampleContext = ^TAVResampleContext;

implementation

uses
   {$IFDEF FPC}
DaMath;
{$ELSE}
    Math;
{$ENDIF}



function FFABS(a: integer): integer; overload;
begin
    if (a >= 0) then
        Result := a
    else
        Result := -a;
end;



function FFSIGN(a: integer): integer; overload;
begin
    if (a > 0) then
        Result := 1
    else if (a < 0) then
        Result := -1
    else
        Result := 0; // thats correct, c++ is pain
end;



function FFMAX(a, b: integer): integer; overload;
begin
    if (a > b) then
        Result := a
    else
        Result := b;
end;



function FFMIN(a, b: integer): integer; overload;
begin
    if (a > b) then
        Result := b
    else
        Result := a;
end;



function FFABS(a: double): double; overload;
begin
    if (a >= 0) then
        Result := a
    else
        Result := -a;
end;



function FFSIGN(a: double): integer; overload;
begin
    if (a > 0) then
        Result := 1
    else if (a < 0) then
        Result := -1
    else
        Result := 0; // thats correct, c++ is pain
end;



function FFMAX(a, b: double): double; overload;
begin
    if (a > b) then
        Result := a
    else
        Result := b;
end;



function FFMIN(a, b: double): double; overload;
begin
    if (a > b) then
        Result := b
    else
        Result := a;
end;

{ **
  * 0th order modified bessel function of the first kind.
  * }

function bessel(x: double): double;
var
    v, lastv, t, lx: double;
    i: integer;
begin
    v := 1;
    lastv := 0;
    t := 1;

    lx := x * x / 4;
    i := 1;
    while v <> lastv do
    begin
        lastv := v;
        t := t * lx / (i * i);
        v := v + t;
        Inc(i);
    end;
    Result := v;
end;



function Clip(a: integer; amin, amax: smallint): smallint;
begin
    if (a < amin) then
        Result := amin
    else if (a > amax) then
        Result := amax
    else
        Result := smallint(a); // TODO: casting to short ok?
end;



function BuildFilter(var filter: array of smallint; factor: double; tap_count: integer; phase_count, scale, _type: integer): boolean;
var
    ph, i, center: integer;
    x, y, w: double;
    tab: array of double;
    norm: double;
    d: double;
    ex: integer;
begin

    SetLength(tab, tap_count);
    center := (tap_count - 1) div 2;

    // if upsampling, only need to interpolate, no filter
    if (factor > 1.0) then
        factor := 1.0;

    for ph := 0 to phase_count - 1 do
    begin
        norm := 0;
        for i := 0 to tap_count - 1 do
        begin
            x := Math_Pi * ((i - center) - ph / phase_count) * factor;
            if (x = 0) then
                y := 1.0
            else
                y := Sin(x) / x;
            case (_type) of

                0:
                begin
                    d := -0.5; // first order derivative = -0.5
                    x := Abs(((i - center) - ph / phase_count) * factor);
                    if (x < 1.0) then
                        y := 1 - 3 * x * x + 2 * x * x * x + d * (-x * x + x * x * x)
                    else
                        y := d * (-4 + 8 * x - 5 * x * x + x * x * x);
                end;

                1:
                begin
                    w := 2.0 * x / (factor * tap_count) + Math_Pi;
                    y := y * (0.3635819 - 0.4891775 * Cos(w) + 0.1365995 * Cos(2 * w) - 0.0106411 * Cos(3 * w));
                end;
                else
                begin
                    w := 2.0 * x / (factor * tap_count * Math_Pi);
                    {$IFDEF FPC}
                    y := y * (bessel(_type * Sqrt(MaxD(1 - w * w, 0))));
                    {$ELSE}
                    y := y * (bessel(_type * Sqrt(Max(1 - w * w, 0))));
                    {$ENDIF}
                end;
            end;

            tab[i] := y;
            norm := norm + y;
        end;

        // normalize so that an uniform color remains the same
        for i := 0 to tap_count - 1 do
        begin
            ex := floor(tab[i] * scale / norm+0.50000);
            filter[ph * tap_count + i] := Clip(ex, -32768, 32767);
        end;
    end;

    Result := True;
end;

{ TAVResampleContext }

procedure TAVResampleContext.Clear;
begin
    rAVClass := nil;
    SetLength(rFilterBank, 0);

    rFilterLength := 0;
    rIdealDstIncr := 0;
    rDstIncr := 0;
    rIndex := 0;
    rFrac := 0;
    rSrcIncr := 0;
    rCompensationDistance := 0;
    rPhaseShift := 0;
    rPhaseMask := 0;
    rLinear := 0;
end;



procedure TAVResampleContext.Init(out_rate, in_rate, filter_size, APhaseShift: integer; ALinear: integer; cutoff: double);
var
    factor: double;
    phase_count: integer;
    r: boolean;
    i: integer;
begin
    {$IFDEF FPC}
    factor := MinD(out_rate * cutoff / in_rate, 1.0);
    {$ELSE}
    factor := min(out_rate * cutoff / in_rate, 1.0);
    {$ENDIF}
    phase_count := 1 shl APhaseShift;

    rPhaseShift := APhaseShift;
    rPhaseMask := phase_count - 1;
    rLinear := ALinear;

    rFilterLength := Max(ceil(filter_size / factor), 1);
    SetLength(rFilterBank, rFilterLength * (phase_count + 1));
    begin
        r := BuildFilter(rFilterBank, factor, rFilterLength, phase_count, (1 shl FILTER_SHIFT), WINDOW_TYPE);
        if (r) then
        begin
            Move(rFilterBank[0], rFilterBank[rFilterLength * phase_count + 1], (rFilterLength - 1) * sizeof(TFELEM));
            rFilterBank[rFilterLength * phase_count] := rFilterBank[rFilterLength - 1];

            rSrcIncr := out_rate;
            rDstIncr := in_rate * phase_count;
            rIdealDstIncr := rDstIncr;
            rIndex := -phase_count * ((rFilterLength - 1) div 2);
        end;
    end;
{    for i:=0 to Length(rFilterBank)-1 do
    begin
        OutputDebugString(pchar(IntToStr(rFilterBank[i])));
    end;
    }
end;



function TAVResampleContext.Resample(dst: TSmallintArray; src: TSmallintArray; var consumed: integer; src_size: integer;
    dst_size: integer; update_ctx: integer): integer;
var
    dst_index, i: integer;
    lIndex, lFrac, ldst_incr_frac, lDst_incr, lCompensationDistance: int32;

    lIndex2, lIncr: int64;

    lFilterOffset: integer;
    lSampleIndex, lVal, lV2: int32;
    lr: longint;
    lTempSrcIdx: integer;
begin
    // c++ is pain
    lIndex := self.rIndex;
    lFrac := self.rFrac;
    ldst_incr_frac := self.rDstIncr mod self.rSrcIncr;
    lDst_incr := self.rDstIncr div self.rSrcIncr;
    lCompensationDistance := self.rCompensationDistance;

    if (lCompensationDistance = 0) and (self.rFilterLength = 1) and (self.rPhaseShift = 0) then
    begin
        lIndex2 := longint(lIndex) shl 32;
        lIncr := (1 shl 32) * self.rDstIncr div self.rSrcIncr;
        dst_size := min(dst_size, (src_size - 1 - lIndex) * self.rSrcIncr div self.rDstIncr);

        for dst_index := 0 to dst_size - 1 do
        begin
            dst[dst_index] := src[lIndex2 shr 32];
            lIndex2 := lIndex2 + lIncr;
        end;
        lFrac := lFrac + dst_index * ldst_incr_frac;
        lIndex := lIndex + dst_index * lDst_incr;
        lIndex := lIndex + lFrac div self.rSrcIncr;
        lFrac := lFrac mod self.rSrcIncr;
    end
    else
    begin
        for dst_index := 0 to dst_size - 1 do
        begin
            lFilterOffset := self.rFilterLength * (lIndex and self.rPhaseMask);
            lr := longint(int64(lIndex) shr self.rPhaseShift);

            lSampleIndex := lr;
            lVal := 0;

            if (lSampleIndex < 0) then
            begin
                for i := 0 to self.rFilterLength - 1 do
                begin
                    lTempSrcIdx := Abs(lSampleIndex + i) mod src_size;
                    lVal := lVal + (src[lTempSrcIdx] * self.rFilterBank[lFilterOffset + i]);
                end;
            end
            else if (lSampleIndex + self.rFilterLength > src_size) then
            begin
                break;
            end
            else if (self.rLinear = 1) then
            begin
                lV2 := 0;
                for i := 0 to self.rFilterLength - 1 do
                begin
                    lVal := lVal + src[lSampleIndex + i] * self.rFilterBank[lFilterOffset + i];
                    lV2 := lV2 + src[lSampleIndex + i] * self.rFilterBank[lFilterOffset + i + self.rFilterLength];
                end;
                lVal := lVal + ((lV2 - lVal) * (lFrac div self.rSrcIncr));
            end
            else
            begin
                for i := 0 to self.rFilterLength - 1 do
                begin
                    lVal := lVal + (src[lSampleIndex + i] * self.rFilterBank[lFilterOffset + i]);
                    if (dst_index=1148) and (i=29) then
                      outputDebugstring(pchar(intToStr(lVal)));
                end;
            end;

            lVal := (lVal + (1 shl (FILTER_SHIFT - 1))) shr FILTER_SHIFT;
            if ((lVal+32768)>65535) then
               dst[dst_index] := (lVal shr 31) xor  32767
            else
            dst[dst_index] := lVal; // Pascal is cool, C++ is pain

            lFrac := lFrac + ldst_incr_frac;
            lIndex := lIndex + lDst_incr;
            if (lFrac >= self.rSrcIncr) then
            begin
                lFrac := lFrac - self.rSrcIncr;
                Inc(lIndex);
            end;

            if (dst_index + 1 = lCompensationDistance) then
            begin
                lCompensationDistance := 0;
                ldst_incr_frac := self.rIdealDstIncr mod self.rSrcIncr;
                lDst_incr := self.rIdealDstIncr div self.rSrcIncr;
            end;
        end;

    end;
    consumed := Max(lIndex, 0) shr self.rPhaseShift;
    if (lIndex >= 0) then
        lIndex := lIndex and self.rPhaseMask;

    if (lCompensationDistance <> 0) then
    begin
        lCompensationDistance := lCompensationDistance - dst_index;
    end;
    if (update_ctx = 1) then
    begin
        self.rFrac := lFrac;
        self.rIndex := lIndex;
        self.rDstIncr := ldst_incr_frac + self.rSrcIncr * lDst_incr;
        self.rCompensationDistance := lCompensationDistance;
    end;

    Result := dst_index;
end;

end.
